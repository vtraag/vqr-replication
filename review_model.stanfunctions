real to_real(int x)
{
    return 1.0*x;
}

real ordinal_normal_lpmf(int review_score, real mu, real sigma, vector cutpoints)
{
    if (review_score <= 1)
    {
        // This would be similar to having review_score[0] = -Infinity
        return normal_lcdf(cutpoints[1] | mu, sigma);
    }
    else if (review_score > size(cutpoints))
    {
        // This would be similar to having review_score[size(cutpoints) + 1] = Infinity
        return normal_lccdf(cutpoints[size(cutpoints)] | mu, sigma);
    }
    else
    {
        return log_diff_exp(normal_lcdf(cutpoints[review_score] | mu, sigma),
                            normal_lcdf(cutpoints[review_score - 1]     | mu, sigma));
    }
}

real ordinal_lognormal_lpmf(int review_score, real mu, real sigma, vector cutpoints)
{
    if (review_score <= 1)
    {
        // This would be similar to having review_score[0] = -Infinity
        return lognormal_lcdf(cutpoints[1] | mu, sigma);
    }
    else if (review_score > size(cutpoints))
    {
        // This would be similar to having review_score[size(cutpoints) + 1] = Infinity
        return lognormal_lccdf(cutpoints[size(cutpoints)] | mu, sigma);
    }
    else
    {
        return log_diff_exp(lognormal_lcdf(cutpoints[review_score]     | mu, sigma),
                            lognormal_lcdf(cutpoints[review_score - 1] | mu, sigma));
    }  
}

// From https://github.com/paul-buerkner/brms/blob/59f3b789d78c741fe2523f3c6df6b54982f89830/inst/chunks/fun_hurdle_lognormal.stan
/* hurdle lognormal log-PDF of a single response
* logit parameterization of the hurdle part
* Args:
*   y: the response value
*   mu: mean parameter of the lognormal distribution
*   sigma: sd parameter of the lognormal distribution
*   hu: linear predictor for the hurdle part
* Returns:
*   a scalar to be added to the log posterior
*/
real hurdle_lognormal_logit_lpdf(real y, real mu, real sigma, real hu) {
    if (y == 0) {
    return bernoulli_logit_lpmf(0 | hu);
    } else {
    return bernoulli_logit_lpmf(1 | hu) +
            lognormal_lpdf(y | mu, sigma);
    }
}

real hurdle_lognormal_logit_rng(real mu, real sigma, real hu)
{
    int nonzero = bernoulli_logit_rng(hu);
    if (nonzero)
    {
        return lognormal_rng(mu, sigma);
    }
    else 
    {
        return 0.0;
    }
}

int ordinal_normal_rng(real mu, real sigma, vector cutpoints)
{
    int K = size(cutpoints) + 1;
    vector[K] prob;
    vector[K - 1] cum_prob;
    
    // Get cumulative probabilities
    for (i in 1:K - 1)
        cum_prob[i] = normal_cdf(cutpoints[i] | mu, sigma);

    // Get probabilities between cutpoints
    prob[1] = cum_prob[1];
    prob[2:K - 1] = cum_prob[2:K - 1] - cum_prob[1:K - 2];
    prob[K] = 1 - cum_prob[K - 1];

    // Sample random element with individual probability
    return categorical_rng(prob);
}

int ordinal_lognormal_rng(real mu, real sigma, vector cutpoints)
{
    int K = size(cutpoints) + 1;
    vector[K] prob;
    vector[K - 1] cum_prob;
    
    // Get cumulative probabilities
    for (i in 1:K - 1)
        cum_prob[i] = lognormal_cdf(cutpoints[i] | mu, sigma);

    // Get probabilities between cutpoints
    prob[1] = cum_prob[1];
    prob[2:K - 1] = cum_prob[2:K - 1] - cum_prob[1:K - 2];
    prob[K] = 1 - cum_prob[K - 1];

    // Sample random element with individual probability
    return categorical_rng(prob);
}    